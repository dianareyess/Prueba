package notesgenerator;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Window extends javax.swing.JFrame {

    PrintWriter salida;

    double C1 = 32.703;
    double D1 = 36.708;
    double E1 = 41.203;
    double F1 = 43.654;
    double G1 = 48.999;
    double A1 = 55.00;
    double B1 = 61.735;

    double C2 = C1 * 2;
    double D2 = D1 * 2;
    double E2 = E1 * 2;
    double F2 = F1 * 2;
    double G2 = G1 * 2;
    double A2 = A1 * 2;
    double B2 = B1 * 2;

    double C3 = C1 * 4;
    double D3 = D1 * 4;
    double E3 = E1 * 4;
    double F3 = F1 * 4;
    double G3 = G1 * 4;
    double A3 = A1 * 4;
    double B3 = B1 * 4;

    double C4 = C1 * 8;
    double D4 = D1 * 8;
    double E4 = E1 * 8;
    double F4 = F1 * 8;
    double G4 = G1 * 8;
    double A4 = A1 * 8;
    double B4 = B1 * 8;

    double C5 = C1 * 16;
    double D5 = D1 * 16;
    double E5 = E1 * 16;
    double F5 = F1 * 16;
    double G5 = G1 * 16;
    double A5 = A1 * 16;
    double B5 = B1 * 16;

    double C6 = C1 * 32;
    double D6 = D1 * 32;
    double E6 = E1 * 32;
    double F6 = F1 * 32;
    double G6 = G1 * 32;
    double A6 = A1 * 32;
    double B6 = B1 * 32;

    double C7 = C1 * 64;
    double D7 = D1 * 64;
    double E7 = E1 * 64;
    double F7 = F1 * 64;
    double G7 = G1 * 64;
    double A7 = A1 * 64;
    double B7 = B1 * 64;
    DefaultTableModel Modelo = new DefaultTableModel();

    public void EncabezadoArduino() {

        Modelo.addRow(new Object[]{"int Start=0;"});
        Modelo.addRow(new Object[]{"int Pin=12;"});
        Modelo.addRow(new Object[]{"void setup(){"});
        Modelo.addRow(new Object[]{"pinMode(Pin, OUTPUT);"});
        Modelo.addRow(new Object[]{"}"});
        Modelo.addRow(new Object[]{"void loop(){"});

    }

    public void ExportarCodigo() {
        int filas = Modelo.getRowCount();
        for (int i = 0; i <= filas - 1; i++) {
            salida.println(Modelo.getValueAt(i, 0));
        }
        salida.flush();
        salida.close();
    }

    public Window() {
        initComponents();

        Modelo = (DefaultTableModel) jTable1.getModel();
        jTextArea1.setLineWrap(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonGenerar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonReestablecer = new javax.swing.JButton();
        jButtonExportar = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arduino Music Code Generator");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButtonGenerar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButtonGenerar.setText("Generar Código");
        jButtonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Arduino"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButtonReestablecer.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButtonReestablecer.setText("Reestablecer");
        jButtonReestablecer.setEnabled(false);
        jButtonReestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReestablecerActionPerformed(evt);
            }
        });

        jButtonExportar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButtonExportar.setText("Exportar Archivo");
        jButtonExportar.setEnabled(false);
        jButtonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonReestablecer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExportar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenerar)
                    .addComponent(jButtonReestablecer)
                    .addComponent(jButtonExportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarActionPerformed

        try {
            String Cancion = jTextArea1.getText();

            if (Cancion.isEmpty()) {
                throw new Exception("Campo vacío");
            }
            Cancion = Cancion + "-";
            int Notes = 0;
            for (int i = 0; i <= Cancion.length() - 1; i++) {
                if (Cancion.charAt(i) == '-') {
                    Notes++;
                }
            }
            if (Notes == 1) {
                throw new Exception("Código Inválido. Debe seguir la sintaxis \"-tiempoNotaEscala-\"");
            }
            EncabezadoArduino();

            StringBuilder buffer = new StringBuilder();
            buffer.append(Cancion);

            for (int i = 0; i <= Cancion.length() - 1; i++) {
                if (Cancion.charAt(i) == ' ') {
                    buffer.deleteCharAt(i);
                }
            }
            Cancion = buffer.toString();

            int NoteStart = 0;
            int NoteEnd = 0;
            int Tempo = 0;
            int Compass = 1;
            String Nota = "";

            for (int i = 0; i <= Cancion.length() - 1; i++) {
                if (Cancion.charAt(i) == '-') {

                    if (NoteEnd == 0) {
                        NoteStart = 0;
                    }

                    NoteEnd = i;

                    Nota = Cancion.substring(NoteStart, NoteEnd);
                    NoteStart = NoteEnd + 1;

                    for (int j = 0; j <= Nota.length() - 1; j++) {
                        switch (Nota.charAt(j)) {
                            case 'r':
                                Tempo = Compass * 1000;
                                break;
                        }
                        switch (Nota.charAt(j)) {
                            case 'b':
                                Tempo = Compass * 500;
                                break;
                        }
                        switch (Nota.charAt(j)) {
                            case 'n':
                                Tempo = Compass * 250;
                                break;
                        }
                        switch (Nota.charAt(j)) {
                            case 'c':
                                Tempo = Compass * 125;
                                break;
                        }
                        switch (Nota.charAt(j)) {
                            case 'x':
                                Tempo = Compass * 63;
                                break;
                        }
                        switch (Nota.charAt(j)) {
                            case 'f':
                                Tempo = Compass * 32;
                                break;
                        }
                        switch (Nota.charAt(j)) {
                            case 'y':
                                Tempo = Compass * 16;
                                break;
                        }

                    }
                    Nota = Nota.substring(1, Nota.length());

                    for (int j = 0; j <= Nota.length() - 1; j++) {

                        switch (Nota.charAt(j)) {
                            case 'p':
                                Tempo = Tempo + (Tempo / 2);
                                Nota = Nota.substring(1, Nota.length());
                                break;
                        }
                    }

                    boolean Silencio = false;
                    int parteEntera = 0;
                    int parteDecimal = 0;
                    double N = 0;
                    double NotaSostenida = 0;

                    switch (Nota) {

                        case "A1":
                            N = (1 / A1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "A2":
                            N = (1 / A2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "A3":
                            N = (1 / A3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "A4":
                            N = (1 / A4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "A5":
                            N = (1 / A5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "A6":
                            N = (1 / A6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "A7":
                            N = (1 / A7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B1":
                            N = (1 / B1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B2":
                            N = (1 / B2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B3":
                            N = (1 / B3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B4":
                            N = (1 / B4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B5":
                            N = (1 / B5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B6":
                            N = (1 / B6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "B7":
                            N = (1 / B7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C1":
                            N = (1 / C1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C2":
                            N = (1 / C2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C3":
                            N = (1 / C3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C4":
                            N = (1 / C4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C5":
                            N = (1 / C5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C6":
                            N = (1 / C6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "C7":
                            N = (1 / C7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D1":
                            N = (1 / D1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D2":
                            N = (1 / D2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D3":
                            N = (1 / D3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D4":
                            N = (1 / D4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D5":
                            N = (1 / D5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D6":
                            N = (1 / D6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "D7":
                            N = (1 / D7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E1":
                            N = (1 / E1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E2":
                            N = (1 / E2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E3":
                            N = (1 / E3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E4":
                            N = (1 / E4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E5":
                            N = (1 / E5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E6":
                            N = (1 / E6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "E7":
                            N = (1 / E7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F1":
                            N = (1 / F1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F2":
                            N = (1 / F2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F3":
                            N = (1 / F3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F4":
                            N = (1 / F4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F5":
                            N = (1 / F5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F6":
                            N = (1 / F6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "F7":
                            N = (1 / F7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G1":
                            N = (1 / G1) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G2":
                            N = (1 / G2) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G3":
                            N = (1 / G3) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G4":
                            N = (1 / G4) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G5":
                            N = (1 / G5) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G6":
                            N = (1 / G6) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "G7":
                            N = (1 / G7) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "S":
                            Silencio = true;
                            break;

                        case "As1":
                            NotaSostenida = ((B1 - A1) / 2) + A1;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "As2":
                            NotaSostenida = ((B2 - A2) / 2) + A2;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "As3":
                            NotaSostenida = ((B3 - A3) / 2) + A3;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "As4":
                            NotaSostenida = ((B4 - A4) / 2) + A4;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "As5":
                            NotaSostenida = ((B5 - A5) / 2) + A5;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "As6":
                            NotaSostenida = ((B6 - A6) / 2) + A6;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "As7":
                            NotaSostenida = ((B7 - A7) / 2) + A7;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs1":
                            NotaSostenida = ((D1 - C1) / 2) + C1;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs2":
                            NotaSostenida = ((D2 - C2) / 2) + C2;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs3":
                            NotaSostenida = ((D3 - C3) / 2) + C3;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs4":
                            NotaSostenida = ((D4 - C4) / 2) + C4;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs5":
                            NotaSostenida = ((D5 - C5) / 2) + C5;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs6":
                            NotaSostenida = ((D6 - C6) / 2) + C6;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Cs7":
                            NotaSostenida = ((D7 - C7) / 2) + C7;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds1":
                            NotaSostenida = ((E1 - D1) / 2) + D1;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds2":
                            NotaSostenida = ((E2 - D2) / 2) + D2;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds3":
                            NotaSostenida = ((E3 - D3) / 2) + D3;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds4":
                            NotaSostenida = ((E4 - D4) / 2) + D4;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds5":
                            NotaSostenida = ((E5 - D5) / 2) + D5;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds6":
                            NotaSostenida = ((E6 - D6) / 2) + D6;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Ds7":
                            NotaSostenida = ((E7 - D7) / 2) + D7;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs1":
                            NotaSostenida = ((G1 - F1) / 2) + F1;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs2":
                            NotaSostenida = ((G2 - F2) / 2) + F2;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs3":
                            NotaSostenida = ((G3 - F3) / 2) + F3;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs4":
                            NotaSostenida = ((G4 - F4) / 2) + F4;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs5":
                            NotaSostenida = ((G5 - F5) / 2) + F5;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs6":
                            NotaSostenida = ((G6 - F6) / 2) + F6;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Fs7":
                            NotaSostenida = ((G7 - F7) / 2) + F7;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs1":
                            NotaSostenida = ((A1 - G1) / 2) + G1;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs2":
                            NotaSostenida = ((A2 - G2) / 2) + G2;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs3":
                            NotaSostenida = ((A3 - G3) / 2) + G3;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs4":
                            NotaSostenida = ((A4 - G4) / 2) + G4;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs5":
                            NotaSostenida = ((A5 - G5) / 2) + G5;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs6":
                            NotaSostenida = ((A6 - G6) / 2) + G6;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;
                        case "Gs7":
                            NotaSostenida = ((A7 - G7) / 2) + G7;
                            N = (1 / NotaSostenida) * 1000;
                            parteEntera = (int) (N / 1);
                            parteDecimal = (int) ((N - parteEntera) * 1000);
                            break;

                    }
                    if (Silencio == false) {
                        Modelo.addRow(new Object[]{"Start=millis();"});
                        Modelo.addRow(new Object[]{"while ((millis()-Start)<=" + Tempo + "){"});
                        Modelo.addRow(new Object[]{"digitalWrite(Pin, HIGH);"});
                        Modelo.addRow(new Object[]{"delay(" + parteEntera + ");"});
                        Modelo.addRow(new Object[]{"delayMicroseconds(" + parteDecimal + ");"});
                        Modelo.addRow(new Object[]{"digitalWrite(Pin, LOW);"});
                        Modelo.addRow(new Object[]{"delay(" + parteEntera + ");"});
                        Modelo.addRow(new Object[]{"delayMicroseconds(" + parteDecimal + ");"});
                        Modelo.addRow(new Object[]{"}"});

                    } else {
                        Modelo.addRow(new Object[]{""});
                        Modelo.addRow(new Object[]{"delay(" + Tempo + ");"});
                        Modelo.addRow(new Object[]{""});
                    }

                } else if ((Cancion.charAt(i) != 'A') && (Cancion.charAt(i) != 'B') && (Cancion.charAt(i) != 'C')
                        && (Cancion.charAt(i) != 'D') && (Cancion.charAt(i) != 'E') && (Cancion.charAt(i) != 'F')
                        && (Cancion.charAt(i) != 'G') && (Cancion.charAt(i) != 'r') && (Cancion.charAt(i) != 'b')
                        && (Cancion.charAt(i) != 'n') && (Cancion.charAt(i) != 'c') && (Cancion.charAt(i) != 's')
                        && (Cancion.charAt(i) != 'f') && (Cancion.charAt(i) != 'x') && (Cancion.charAt(i) != '1')
                        && (Cancion.charAt(i) != '2') && (Cancion.charAt(i) != '3') && (Cancion.charAt(i) != '4'
                        && (Cancion.charAt(i) != '5') && (Cancion.charAt(i) != '6') && (Cancion.charAt(i) != '7'))
                        && (Cancion.charAt(i) != 's') && (Cancion.charAt(i) != 'S') && (Cancion.charAt(i) != 'y')
                        && (Cancion.charAt(i) != 'p')) {

                    jButtonGenerar.setEnabled(true);
                    jButtonReestablecer.setEnabled(false);
                    jButtonExportar.setEnabled(false);
                    int filas = Modelo.getRowCount();
                    for (int k = 1; i <= filas; i++) {
                        Modelo.removeRow(0);
                    }

                    throw new Exception("Caracter inválido: " + Cancion.charAt(i));

                }
            }

            Notes++;
            Modelo.addRow(new Object[]{"}"});
            jButtonGenerar.setEnabled(false);
            jButtonReestablecer.setEnabled(true);
            jButtonExportar.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());

        }


    }//GEN-LAST:event_jButtonGenerarActionPerformed

    private void jButtonReestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReestablecerActionPerformed
        jButtonGenerar.setEnabled(true);
        jButtonReestablecer.setEnabled(false);
        jButtonExportar.setEnabled(false);
        int filas = Modelo.getRowCount();
        for (int i = 1; i <= filas; i++) {
            Modelo.removeRow(0);
        }
    }//GEN-LAST:event_jButtonReestablecerActionPerformed

    private void jButtonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarActionPerformed
        javax.swing.JFileChooser Ventana = new javax.swing.JFileChooser();
        String ruta = "";
        try {
            if (Ventana.showSaveDialog(null) == Ventana.APPROVE_OPTION) {
                ruta = Ventana.getSelectedFile().getAbsolutePath();

                try {
                    salida = new PrintWriter(ruta + ".ino");
                    ExportarCodigo();

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Window.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_jButtonExportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JButton jButtonGenerar;
    private javax.swing.JButton jButtonReestablecer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
